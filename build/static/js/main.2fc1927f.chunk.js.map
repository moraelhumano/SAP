{"version":3,"sources":["firebase.js","components/EpisodeForm.js","components/Episodes.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","EpisodesForm","props","initialStateValues","episodeName","noEpisode","format","description","img","audio","specialGuest","igGuest","useState","values","setValues","handleInputChange","e","target","name","value","getLinkById","id","a","collection","doc","get","data","useEffect","currentId","onSubmit","preventDefault","addOrEditLink","className","type","placeholder","onChange","rows","Episodes","links","setLinks","setCurrentId","getLinks","orderBy","onSnapshot","querySnapshot","docs","forEach","push","onDeleteLink","window","confirm","delete","toast","autoClose","console","log","linkObject","set","update","error","EpisodeForm","map","link","key","to","index","onClick","href","rel","src","App","Fragment","path","exact","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"uWAgBaA,G,MAFFC,IAASC,cAVC,CACnBC,OAAQ,0CACRC,WAAY,8BACZC,YAAa,qCACbC,UAAW,cACXC,cAAe,0BACfC,kBAAmB,eACnBC,MAAO,8CAKYC,aCqJNC,EAjKM,SAACC,GAGpB,IAAMC,EAAqB,CACzBC,YAAa,GACbC,UAAU,GACVC,OAAQ,OACRC,YAAa,GACbC,IAAK,GACLC,MAAM,GACNC,aAAc,GACdC,QAAQ,IAXoB,EAkBFC,mBAAST,GAlBP,mBAkBvBU,EAlBuB,KAkBfC,EAlBe,KAqBxBC,EAAoB,SAACC,GAAO,IAAD,EACPA,EAAEC,OAAlBC,EADuB,EACvBA,KAAMC,EADiB,EACjBA,MACdL,EAAU,2BAAKD,GAAN,kBAAeK,EAAOC,MA2B3BC,EAAW,uCAAG,WAAOC,GAAP,eAAAC,EAAA,sEACAhC,EAAGiC,WAAW,SAASC,IAAIH,GAAII,MAD/B,OACZD,EADY,OAElBV,EAAU,eAAKU,EAAIE,SAFD,2CAAH,sDAcjB,OATAC,qBAAU,WACgB,KAApBzB,EAAM0B,UACRd,EAAU,eAAKX,IAEfiB,EAAYlB,EAAM0B,aAGnB,CAAC1B,EAAM0B,YAGR,0BAAMC,SA1Ba,SAACb,GACpBA,EAAEc,iBAMF5B,EAAM6B,cAAclB,GACpBC,EAAU,eAAKX,KAkBe6B,UAAU,iCACtC,yBAAKA,UAAU,0BACb,2BACEC,KAAK,OACLd,MAAON,EAAOT,YACdc,KAAK,cACLgB,YAAY,yBACZF,UAAU,eACVG,SAAUpB,KAId,yBAAKiB,UAAU,cACb,2BACEC,KAAK,SACLD,UAAU,eACVE,YAAY,2BACZf,MAAON,EAAOR,UACda,KAAK,YACLiB,SAAUpB,KAId,yBAAKiB,UAAU,cACb,8BACEI,KAAK,IACLJ,UAAU,eACVE,YAAY,8BACZhB,KAAK,cACLC,MAAON,EAAON,YACd4B,SAAUpB,KAKd,yBAAKiB,UAAU,cACb,2BACEC,KAAK,OACLD,UAAU,eACVE,YAAY,sBACZf,MAAON,EAAOH,aACdQ,KAAK,eACLiB,SAAUpB,KAId,yBAAKiB,UAAU,cACb,2BACEC,KAAK,OACLD,UAAU,eACVE,YAAY,6BACZf,MAAON,EAAOF,QACdO,KAAK,UACLiB,SAAUpB,KAId,yBAAKiB,UAAU,cACb,2BACEC,KAAK,OACLD,UAAU,eACVE,YAAY,2BACZf,MAAON,EAAOJ,MACdS,KAAK,QACLiB,SAAUpB,KAId,yBAAKiB,UAAU,0BACb,2BACEC,KAAK,OACLD,UAAU,eACVE,YAAY,qBACZf,MAAON,EAAOL,IACdU,KAAK,MACLiB,SAAUpB,KAId,yBAAKiB,UAAU,0BACb,4BAAQG,SAAUpB,EAAmBG,KAAK,UACxC,4BAAQC,MAlIH,QAkIL,aACA,4BAAQA,MApIJ,OAoIJ,WAMJ,4BAAQa,UAAU,6BACK,KAApB9B,EAAM0B,UAAmB,OAAS,YClC5BS,EA5GE,WAAO,IAAD,EACKzB,mBAAS,IADd,mBACd0B,EADc,KACPC,EADO,OAEa3B,mBAAS,IAFtB,mBAEdgB,EAFc,KAEHY,EAFG,KAIfC,EAAQ,uCAAG,sBAAAnB,EAAA,sDACfhC,EAAGiC,WAAW,SACXmB,QAAQ,aACRC,YAAW,SAACC,GACb,IAAMC,EAAO,GACbD,EAAcE,SAAQ,SAACtB,GACrBqB,EAAKE,KAAL,2BAAevB,EAAIE,QAAnB,IAA2BL,GAAIG,EAAIH,SAErCkB,EAASM,MARI,2CAAH,qDAYRG,EAAY,uCAAG,WAAO3B,GAAP,SAAAC,EAAA,0DACf2B,OAAOC,QAAQ,4CADA,gCAEX5D,EAAGiC,WAAW,SAASC,IAAIH,GAAI8B,SAFpB,OAGjBC,YAAM,4BAA6B,CACjCnB,KAAM,QACNoB,UAAW,MALI,2CAAH,sDAUlB1B,qBAAU,WACRc,IACAa,QAAQC,IAAIjB,KAEX,IAEH,IAAMP,EAAa,uCAAG,WAAOyB,GAAP,SAAAlC,EAAA,kEAEA,KAAdM,EAFc,gCAGVtC,EAAGiC,WAAW,SAASC,MAAMiC,IAAID,GAHvB,OAIhBJ,YAAM,qCAAsC,CAC1CnB,KAAM,YALQ,uCAQV3C,EAAGiC,WAAW,SAASC,IAAII,GAAW8B,OAAOF,GARnC,OAShBJ,YAAM,4BAA6B,CACjCnB,KAAM,SAERO,EAAa,IAZG,0DAelBc,QAAQK,MAAR,MAfkB,0DAAH,sDAmBnB,OACE,oCAEE,yBAAK3B,UAAU,gBACb,kBAAC4B,EAAgB,CAAE7B,gBAAeH,YAAWU,WAE/C,yBAAKN,UAAU,gBACf,2DAEA,yBAAKA,UAAU,oBACZM,EAAMuB,KAAI,SAACC,GAAD,OACT,yBAAK9B,UAAU,kBAAkB+B,IAAKD,EAAKzC,IACzC,yBAAKW,UAAU,aACb,yBAAKA,UAAU,kCAEb,kBAAC,IAAD,CAAMgC,GAAE,qBAAgBF,EAAKzC,KAC3B,4BAAKyC,EAAK1D,cAEZ,2BAAI0D,EAAKG,OACT,6BACE,uBACEjC,UAAU,6BACVkC,QAAS,kBAAMlB,EAAac,EAAKzC,MAFnC,SAMA,uBACEW,UAAU,iBACVkC,QAAS,kBAAM1B,EAAasB,EAAKzC,MAFnC,YAQJ,2BAAIyC,EAAKvD,aACc,KAAtBuD,EAAKpD,aACF,+BAEA,+BACA,2BAAIoD,EAAKpD,cACP,uBAAGyD,KAAML,EAAKnD,QAASM,OAAO,SAASmD,IAAI,uBAA3C,eAMR,yBAAKC,IAAKP,EAAKtD,MACf,4BAAQ6D,IAAKP,EAAKrD,gBCnEf6D,MA9Bf,WACE,OAEF,kBAAC,IAAD,KACA,kBAAC,IAAMC,SAAP,KACA,kBAAC,IAAD,KAEI,yBAAKvC,UAAU,iBACf,kBAAC,IAAD,CAAOwC,KAAK,iBAEV,yBAAKxC,UAAU,SAIf,kBAAC,IAAD,CAAOwC,KAAK,IAAIC,OAAK,GACnB,yBAAKzC,UAAU,OACb,kBAAC,EAAD,QAKJ,kBAAC,IAAD,WC1Bc0C,QACW,cAA7BzB,OAAO0B,SAASC,UAEe,UAA7B3B,OAAO0B,SAASC,UAEhB3B,OAAO0B,SAASC,SAASC,MACvB,2D,MCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAA9B,GACLL,QAAQK,MAAMA,EAAM+B,c","file":"static/js/main.2fc1927f.chunk.js","sourcesContent":["import firebase from 'firebase/app'\nimport 'firebase/firestore';\n\n// Your web app's Firebase configuration\nvar firebaseConfig = {\n  apiKey: \"AIzaSyAeJKDVKWYKjZcBffFq6axiqEU4iNupVIo\",\n  authDomain: \"rifas-ce773.firebaseapp.com\",\n  databaseURL: \"https://rifas-ce773.firebaseio.com\",\n  projectId: \"rifas-ce773\",\n  storageBucket: \"rifas-ce773.appspot.com\",\n  messagingSenderId: \"155210069413\",\n  appId: \"1:155210069413:web:62b2326be467a1ccf0244c\"\n};\n// Initialize Firebase\nconst fb = firebase.initializeApp(firebaseConfig);\n\nexport const db = fb.firestore();","import React, { useState, useEffect } from \"react\";\nimport { db } from \"../firebase\";\nimport { toast } from \"react-toastify\";\n\nconst EpisodesForm = (props) => {\n\n\n  const initialStateValues = {\n    episodeName: \"\",\n    noEpisode:\"\",\n    format: \"QFDE\",\n    description: \"\",\n    img: \"\",\n    audio:\"\",\n    specialGuest: \"\",\n    igGuest:\"\",\n\n  };\n\n  const RYC = \"RYC\";\n  const QFDE = \"QFDE\";\n\n  const [values, setValues] = useState(initialStateValues);\n\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setValues({ ...values, [name]: value });\n  };\n\n  // const validURL = (str) => {\n  //   var pattern = new RegExp(\n  //     \"^(https?:\\\\/\\\\/)?\" + // protocol\n  //     \"((([a-z\\\\d]([a-z\\\\d-]*[a-z\\\\d])*)\\\\.)+[a-z]{2,}|\" + // domain name\n  //     \"((\\\\d{1,3}\\\\.){3}\\\\d{1,3}))\" + // OR ip (v4) address\n  //     \"(\\\\:\\\\d+)?(\\\\/[-a-z\\\\d%_.~+]*)*\" + // port and path\n  //     \"(\\\\?[;&a-z\\\\d%_.~+=-]*)?\" + // query string\n  //       \"(\\\\#[-a-z\\\\d_]*)?$\",\n  //     \"i\"\n  //   ); // fragment locator\n  //   return !!pattern.test(str);\n  // };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    // if (!validURL(values.igGuest)) {\n    //   return toast(\"invalid url\", { type: \"warning\", autoClose: 1000 });\n    // }\n\n    props.addOrEditLink(values);\n    setValues({ ...initialStateValues });\n  };\n\n  const getLinkById = async (id) => {\n    const doc = await db.collection(\"links\").doc(id).get();\n    setValues({ ...doc.data() });\n  };\n\n  useEffect(() => {\n    if (props.currentId === \"\") {\n      setValues({ ...initialStateValues });\n    } else {\n      getLinkById(props.currentId);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [props.currentId]);\n\n  return (\n    <form onSubmit={handleSubmit} className=\"card card-body border-primary\">\n      <div className=\"form-group input-group\">\n        <input\n          type=\"text\"\n          value={values.episodeName}\n          name=\"episodeName\"\n          placeholder=\"Nombre del capítulo\"\n          className=\"form-control\"\n          onChange={handleInputChange}\n        />\n      </div>\n\n      <div className=\"form-group\">\n        <input\n          type=\"number\"\n          className=\"form-control\"\n          placeholder=\"Número de cápitulo\"\n          value={values.noEpisode}\n          name=\"noEpisode\"\n          onChange={handleInputChange}\n        />\n      </div>\n\n      <div className=\"form-group\">\n        <textarea\n          rows=\"3\"\n          className=\"form-control\"\n          placeholder=\"Descripción del episodio\"\n          name=\"description\"\n          value={values.description}\n          onChange={handleInputChange}\n        ></textarea>\n      </div>\n\n\n      <div className=\"form-group\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          placeholder=\"Nombre del invitado\"\n          value={values.specialGuest}\n          name=\"specialGuest\"\n          onChange={handleInputChange}\n        />\n      </div>\n\n      <div className=\"form-group\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          placeholder=\"Ingresa el ig del invitado\"\n          value={values.igGuest}\n          name=\"igGuest\"\n          onChange={handleInputChange}\n        />\n      </div>\n      \n      <div className=\"form-group\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          placeholder=\"Ingresa la url del audio\"\n          value={values.audio}\n          name=\"audio\"\n          onChange={handleInputChange}\n        />\n      </div>\n\n      <div className=\"form-group input-group\">\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          placeholder=\"Url para la imagen\"\n          value={values.img}\n          name=\"img\"\n          onChange={handleInputChange}\n        />\n      </div>\n\n      <div className=\"form-group input-group\">\n        <select onChange={handleInputChange} name=\"format\" >\n          <option value={ QFDE }>¿QFDE?</option>\n          <option value={ RYC }>R Y C</option>\n        </select>\n      </div>\n\n\n\n      <button className=\"btn btn-primary btn-block\">\n        {props.currentId === \"\" ? \"Save\" : \"Update\"}\n      </button>\n\n    </form>\n  );\n};\n\nexport default EpisodesForm;\n","import React, { useEffect, useState } from \"react\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  NavLink\n} from 'react-router-dom'\n\nimport EpisodeForm from \"./EpisodeForm\";\n\nimport { db } from \"../firebase\";\nimport { toast } from \"react-toastify\";\n\n\n\nconst Episodes = () => {\n  const [links, setLinks] = useState([]);\n  const [currentId, setCurrentId] = useState(\"\");\n\n  const getLinks = async () => {\n    db.collection(\"links\")\n      .orderBy('noEpisode')\n      .onSnapshot((querySnapshot) => {\n      const docs = [];\n      querySnapshot.forEach((doc) => {\n        docs.push({ ...doc.data(), id: doc.id });\n      });\n      setLinks(docs);\n    });\n  };\n\n  const onDeleteLink = async (id) => {\n    if (window.confirm(\"Seguro que quieres borrar este episodio?\")) {\n      await db.collection(\"links\").doc(id).delete();\n      toast(\"El episodio fue eliminado\", {\n        type: \"error\",\n        autoClose: 2000\n      });\n    }\n  };\n\n  useEffect(() => {\n    getLinks();\n    console.log(links)\n\n  }, []);\n\n  const addOrEditLink = async (linkObject) => {\n    try {\n      if (currentId === \"\") {\n        await db.collection(\"links\").doc().set(linkObject);\n        toast(\"El nuevo episodio ha sido agregado\", {\n          type: \"success\",\n        });\n      } else {\n        await db.collection(\"links\").doc(currentId).update(linkObject);\n        toast(\"Link Updated Successfully\", {\n          type: \"info\",\n        });\n        setCurrentId(\"\");\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  return (\n    <>\n\n      <div className=\"col-md-4 p-2\">\n        <EpisodeForm {...{ addOrEditLink, currentId, links }} />\n      </div>\n      <div className=\"col-md-8 p-2\">\n      <h1>Último vídeo agregado</h1>\n\n      <div className=\"flex-col-reverse\">\n        {links.map((link) => (\n          <div className=\"card mb-1 mt-4 \" key={link.id}>\n            <div className=\"card-body\">\n              <div className=\"d-flex justify-content-between\">\n\n                <Link to={`/episodios/${link.id}`}>\n                  <h4>{link.episodeName}</h4>\n                </Link>                \n                <p>{link.index}</p>\n                <div>\n                  <i\n                    className=\"material-icons text-danger\"\n                    onClick={() => onDeleteLink(link.id)}\n                  >\n                    close\n                  </i>\n                  <i\n                    className=\"material-icons\"\n                    onClick={() => setCurrentId(link.id)}\n                  >\n                    create\n                  </i>\n                </div>\n              </div>\n              <p>{link.description}</p>\n              {link.specialGuest === \"\" ? (\n                  <span></span>\n                ) : (\n                  <label> \n                  <p>{link.specialGuest}</p>  \n                    <a href={link.igGuest} target=\"_blank\" rel=\"noopener noreferrer\">\n                      Instagram\n                    </a>\n                </label>\n                )}\n            </div>\n            <img src={link.img} /> \n            <iframe src={link.audio} />\n            \n          </div>\n        ))}\n      </div>\n      </div>\n    </>\n  );\n};\n\nexport default Episodes;\n","import React from \"react\";\nimport \"./App.css\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Link,\n  NavLink\n} from 'react-router-dom';\n\n\nimport { ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.css\";\nimport Episodes from \"./components/Episodes\";\nimport Episode from \"./components/Episode\";\n\n\nfunction App() {\n  return (\n\n<Router>\n<React.Fragment>\n<Switch>\n\n    <div className=\"container p-4\">\n    <Route path=\"/episodio/:id\">\n\n      <div className=\"row\">\n      </div>\n      </Route>\n\n      <Route path=\"/\" exact>\n        <div className=\"row\">\n          <Episodes />\n\n        </div>\n      </Route>\n\n      <ToastContainer />\n    </div>\n\n  </Switch>\n</React.Fragment>\n</Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport 'bootswatch/dist/superhero/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}